Docker Notes for Beginners

What is Docker?
Docker is a platform to build, share, and run applications using containers.
A container is a lightweight, portable, and self-sufficient environment for running software.
Unlike virtual machines (VMs), containers share the host system's kernel, making them faster and more efficient.

Why Use Docker?
Portability: Works the same on any system.
Efficiency: Lightweight and uses fewer resources than VMs.
Scalability: Easy to deploy multiple containers.
Isolation: Separate environments for different applications.

Key Concepts
Image: A read-only template with instructions to create a container. Example: an image for a Python application.
Container: A running instance of an image.
Dockerfile: A script with instructions to build a Docker image.
Docker Hub: A public repository for sharing Docker images.

Installation
Download and install Docker Desktop from https://www.docker.com/.
Verify installation:
bash
Copy code
docker --version
Common Commands
1. Working with Images
Pull an image from Docker Hub:

bash
Copy code
docker pull <image_name>
Example:

bash
Copy code
docker pull nginx
List downloaded images:

bash
Copy code
docker images
Remove an image:

bash
Copy code
docker rmi <image_id>
2. Working with Containers
Run a container:

bash
Copy code
docker run <image_name>
Example:

bash
Copy code
docker run nginx
Run a container in detached mode:

bash
Copy code
docker run -d <image_name>
List running containers:

bash
Copy code
docker ps
List all containers (including stopped):

bash
Copy code
docker ps -a
Stop a container:

bash
Copy code
docker stop <container_id>
Remove a container:

bash
Copy code
docker rm <container_id>
3. Dockerfile Basics
Create a Dockerfile:

dockerfile
Copy code
# Use a base image
FROM python:3.9-slim

# Set the working directory
WORKDIR /app

# Copy files into the container
COPY . /app

# Install dependencies
RUN pip install -r requirements.txt

# Command to run the application
CMD ["python", "app.py"]
Build an image:

bash
Copy code
docker build -t <image_name> .
Run a container from your custom image:

bash
Copy code
docker run <image_name>
4. Networking
Map a containerâ€™s port to the host machine:
bash
Copy code
docker run -p <host_port>:<container_port> <image_name>
Example:
bash
Copy code
docker run -p 8080:80 nginx
5. Volume Management
Persist data using volumes:

bash
Copy code
docker run -v <host_dir>:<container_dir> <image_name>
Example:

bash
Copy code
docker run -v /mydata:/data nginx
List volumes:

bash
Copy code
docker volume ls
Best Practices
Keep Dockerfiles simple and efficient.
Use official images from Docker Hub whenever possible.
Remove unused containers, images, and volumes to save space:
bash
Copy code
docker system prune
Use .dockerignore to exclude unnecessary files from the build.
Next Steps
Practice: Build a simple application (e.g., a web server) and containerize it.
Explore Docker Compose: Orchestrate multiple containers (e.g., a web server + database).
Learn Kubernetes: For managing containers at scale.
