Docker Guide


The following Text File is made up of the following Docs:

 - Docker for Beginners: A Comprehensive Guide
 - Docker for Beginners: The Ultimate Audio Guide
 - 

===================================================================================================================================================================

Chapter 1: What is Docker?

Let’s start with the basics: what exactly is Docker?

 - Docker is a platform designed to help developers build, share, and run applications in isolated environments known as containers.

Think of a container as a small, self-contained package that holds everything your application needs to run: the code, runtime, system tools, libraries, dependencies and settings and configuration files.

The beauty of containers lies in their portability and consistency. They run exactly the same on your laptop, a colleague's machine, or even a production server in the cloud. With Docker, you can eliminate the age-old "it works on my machine" problem.

But why is this important? Imagine you’re a developer working on multiple projects. Each project might require different versions of programming languages, libraries, or databases. Without containers, managing these dependencies can be a nightmare. Docker solves this by isolating each project in its own container, so they never interfere with one another.




============================================================================================

Chapter 2: Why Use Docker?

So, why should you care about Docker? Let’s explore its key benefits:

	- Efficiency: Containers are lightweight because they share the host operating system’s kernel. Unlike virtual machines, which require their own OS, containers are faster to start and use fewer resources.

	- Portability: A containerized application runs the same way, regardless of where it’s deployed — your local machine, a testing environment, or a cloud server.

	- Isolation: Each container is self-contained. This means you can run multiple containers on the same system without worrying about conflicts.

	- Scalability: Docker makes it easy to scale applications by running multiple instances of a container.

Simply put, Docker streamlines the entire development lifecycle.


------------------------------------------------------------------------------------------
Containers vs Virtual Machines

Both containers and virtual machines are used to run applications in isolated environments, but they differ in a few key ways:

Feature			Containers			Virtual Machines
Kernel Sharing		Shares the host OS kernel	Each VM has its own OS kernel
Size			Lightweight (MBs)		Heavy (GBs)
Startup Time		Seconds				Minutes
Performance		High				Moderate (resource-intensive)


Docker uses the host OS kernel and isolates the application environment using features like namespaces and cgroups in Linux. This makes containers lightweight and efficient.


What is a Container 
• A way to package an application with all the necessary dependencies and configuration
• Portable Artifact, easily shared and moved around 
• Makes development more efficient 
• A container is a running environment for an Image

Technically 
• A Container is layers of stacked images
• At the base is usually Linux Base Image, small in size
• Application image on top


Docker Toolbox 
A tool which abstracts away the OS kernel layer to make it possible for your host to run different docker images


============================================================================================

Chapter 3: Core Concepts

To work with Docker effectively, it’s important to understand a few key concepts. Let’s break them down:


 - Dockerfile:
This is a text file that contains a set of instructions for creating a Docker image.
Think of it as the recipe for creating your application’s environment.

---------------------------------------------
An example of a simple Dockerfile:


# Use an official Python image as the base
FROM python:3.9-slim  

# Set the working directory in the container
WORKDIR /app  

# Copy application files into the container
COPY . .  

# Install dependencies
RUN pip install -r requirements.txt  

# Command to run the application
CMD ["python", "app.py"]  

---------------------------------------------

 - Image:
An image is a snapshot of an application’s environment, built using a Dockerfile. 
Images are read-only and can be shared with others through Docker Hub or private repositories.


 - Container:
A container is a running instance of an image. 
A container is the running environment of an image
It’s where your application lives and operates. Containers are isolated from one another but share the host OS kernel.


 - Volumes:
Volumes are used to persist data outside of containers. 
Without volumes, any data inside a container would be lost once the container stops.


 - Docker Hub:
This is a public repository where you can find and share Docker images. 



============================================================================================

Chapter 4: Getting Started with Docker

Now that you know what Docker is, let’s dive into getting started.

1. Install Docker:
Visit Docker’s official website and download Docker Desktop for your operating system.

2. Once installed, open your terminal and run this command to verify:

	docker --version

3. Run Your First Container:

	docker run hello-world

Docker will pull a test image and run it, displaying a "Hello, World!" message. Congratulations, you’ve just run your first Docker container!



============================================================================================

Chapter 5: Docker Commands 

Docker has a variety of commands, but here are the essentials to get started:

• Docker build -t my-image . 
Build an Image from a Dockerfile:

• Docker images
Checks current existing images

• Docker pull (image-name)
Pull an Image:


• Docker run (image-name)
Run/Create a new container from an image
Start the image in a container, container is the running environment of an image 

• Docker run -d (image-name)
Starts new container with a command 
-d detached mode, run the container in detached mode, run the terminal again


• Docker ps
Lists the running containers

• Docker ps -a
Lists all the containers, running and !not running/ stopped


• Docker stop (container ID)
Stops the container 

• Docker start (container ID)
Starts the stopped container 
Working with containers not images

• Docker rm (container ID)
Remove a Container


• Docker run -p(Host port : container port) -d (image-name)
Run a Container with Port Mapping:
-p Port binding - bind port of host to container 


• Docker run -v <host_path>:<container_path> <image_name>
Mount a Volume:


Debugging Commands

• Docker logs (container ID)
See logs of container 

• Docker run -d -p6000:6379 --name  newContainername image-name:tag
Name a container 

• Docker exec -it (container ID/name) /bin/bash
Get the terminal of the running container
Inside of container as root user


---------------------------------------------

RUN DOCKER CONTAINER 

## start mongodb

docker run -d \					   docker run -d
-p 27017:27017 \				-p (Host port : container port) 
-e MONGO_INITDB_ROOT_USERNAME=admin \		-e (environment variable)
-e MONGO_INITDB_ROOT_PASSWORD=password \	-e (environment variable)
-- net mongo-network \				--net network name
-- name mongodb \				--name container name
mongo						   image-name : tag


---------------------------------------------

DOCKER COMPOSE FILE

version: '3'
services:
    mongodb :
	image: mongo
	ports:
	- 27017:27017
	environment:
	- MONGO_INITDB_ROOT_USERNAME=admin
	- MONGO_INITDB_ROOT_PASSWORD=password

    mongo-express :
	image: mongo-express
	ports:
	  - 8080:8081
	environment:
	  - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
	  - ME_CONFIG_MONGODB_ADMINPASSWORD=password
	  - ME_CONFIG_MONGODB_SERVER=mongodb


Indentation in Yaml!!!



===================================================================================================================================================================

Docker Compose Notes




============================================================================================



============================================================================================





============================================================================================

Docker Guide Continued 


Chapter 6: Building Your First Dockerized Application
[Speaker]
Let’s walk through creating a simple web server using Docker.


1. Create a Python File:

# app.py
from flask import Flask
app = Flask(__name__)
@app.route('/')
def home():
    return "Hello, Docker!"
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)


2. Write a Dockerfile:

FROM python:3.9-slim
WORKDIR /app
COPY . .
RUN pip install flask
CMD ["python", "app.py"]


3. Build the Image:

  docker build -t flask-app .


4. Run the Container:

  docker run -p 5000:5000 flask-app


5. Visit http://localhost:5000 in your browser, and you’ll see your app in action.



============================================================================================

Chapter 7: Best Practices and Next Steps

Congratulations on completing your introduction to Docker! Before we wrap up, let’s cover a few best practices:

 - Use Official Images:
Always start with verified images from Docker Hub.

 - Keep Dockerfiles Clean:
Write clear and efficient instructions in your Dockerfile.

 - Learn Docker Compose:
Use Docker Compose to manage multi-container applications.

 - Clean Up Regularly:
Remove unused images and containers to free up space:

	docker system prune


============================================================================================

Closing Remarks

You’ve reached the end of Docker for Beginners: A Comprehensive Guide. 

Remember, the best way to learn is by doing. 
Experiment, build, and break things—that’s how you grow as a developer.








===================================================================================================================================================================






============================================================================================



============================================================================================








